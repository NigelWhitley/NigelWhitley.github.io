<html>
<head>
<title>Sudoku helper</title>
<link rel="stylesheet" type="text/css" href="sudoku.css">
<script>
/* 
Sudoku Aid v0.1 by Nigel Whitley (c) Copyright 27/05/2005
Released under the terms of the Gnu GPL v2
 */
	function addEvent(element, eventType, eventFunction, useCapture)
	{
		// Add an event to an element : cross-browser
		if (element.addEventListener){
			element.addEventListener(eventType, eventFunction, useCapture);
			return true;
		} else if (element.attachEvent){
			var r = element.attachEvent("on"+eventType, eventFunction);
			return r;
		} else {
			alert("Handler could not be added");
		}
	}

	function removeEvent(element, eventType, eventFunction, useCapture)
	{
		// Remove an event to an element : cross-browser
		if (element.removeEventListener){
			element.removeEventListener(eventType, eventFunction, useCapture);
			return true;
		} else if (element.detachEvent){
			var r = element.detachEvent("on"+eventType, eventFunction);
			return r;
		} else {
			alert("Handler could not be removed");
		}
	}

	function remove_children(main_element) {
		if ( ( main_element ) ) {
			for (var child_index=main_element.childNodes.length-1; child_index>=0; child_index--) {
				remove_children(main_element.childNodes[child_index]);
				main_element.removeChild(main_element.childNodes[child_index]);
			}
		}
	}

	function make_debug(debugText) {
		var debugNode = document.createElement("H4");
		page_body.appendChild(debugNode);
		var debugTextNode = document.createTextNode(debugText);
		debugNode.appendChild(debugTextNode);
	}

	function make_heading(headingText) {
		var heading = document.createElement("H1");
		page_body.appendChild(heading);
		var headingNode = document.createTextNode(headingText);
		heading.appendChild(headingNode);
	}

	var maxValue = 9;
	var maxInner = 3;
	var currentValues = new Array(maxValue);
	var possibleValues = new Array();
	var undoList = new Array();
	var undoCount = 0;

	var page_body;
	var cell_width = 30;
	var cell_height = 30;

	function Coordinate(aRow, aColumn)
	// Define a coordinate in the Sudoku square
	{
		this.row = aRow;
		this.column = aColumn;
	}

	function get_associated_row( which_row, which_column ) {
		var coordinates = new Array(maxValue-1);
		var coordinate_index = 0;
		for (column=0; column < maxValue; column++) {
			if ( column != which_column ) {
				var coordinate = new Coordinate(which_row, column);
				coordinates[coordinate_index] = coordinate;
				coordinate_index++;
			}
		}
		return coordinates;
	}

	function get_associated_column( which_row, which_column ) {
		var coordinates = new Array(maxValue-1);
		var coordinate_index = 0;
		for (row=0; row < maxValue; row++) {
			if ( row != which_row ) {
				var coordinate = new Coordinate(row, which_column);
				coordinates[coordinate_index] = coordinate;
				coordinate_index++;
			}
		}
		return coordinates;
	}

	function get_associated_square( which_row, which_column ) {
	
		var base_row = Math.floor(which_row / maxInner) * maxInner;
		var base_column = Math.floor(which_column / maxInner) * maxInner;

		var coordinates = new Array(maxValue-1);
		var coordinate_index = 0;

		for ( var row = base_row; row < base_row+maxInner; row++) {
			for ( var column = base_column; column < base_column+maxInner; column++) {
				if ( ( row != which_row ) || ( column != which_column ) ) {
					var coordinate = new Coordinate(row, column);
					coordinates[coordinate_index] = coordinate;
					coordinate_index++;
				}
			}
		}

		return coordinates;
	}

	function show_undo() {
		var formNode = document.createElement("form");
		page_body.appendChild(formNode);

		var undoButton = document.createElement("input");

		undoButton.setAttribute("type","button");
		undoButton.setAttribute("name","undoButton");
		undoButton.setAttribute("value","Undo");

		addEvent(undoButton, "click", undoFixValue, false);
		formNode.appendChild(undoButton);
	}

	function undoFixValue()
	// Fix a value in a square
	{
		var undoCoordinate = undoList[--undoCount];
		var row = undoCoordinate.row;
		var column = undoCoordinate.column;
		currentValues[row][column] = 0;

		remove_children(page_body);
		build_possible_values();
		make_heading("Sudoku Aid");
		if ( undoCount > 0 ) {
			show_undo();
		}
		build_table();

	}

	function fixValue()
	// Fix a value in a square
	{
		var table_cell=this.parentNode;
		var cell_name = table_cell.name;
		var row = cell_name.substr( 4, 1);
		var column = cell_name.substr( 5, 1);
		var clicked_text=this.childNodes[0].nodeValue;
		undoList[undoCount++] = new Coordinate(row, column);
		currentValues[row][column] = clicked_text.valueOf();

		remove_children(page_body);
		build_possible_values();
		make_heading("Sudoku Aid");
		show_undo();
		build_table();
		return false;
	}

	function fixTextValue()
	// Fix a value in a square
	{
		this.nodeValue = "5";
	}

	function switchTable()
	// Fix a value in a square
	{
		remake_current();
		//this.nodeValue = page_body.childNodes.length;
		var main_element=this.parentNode.parentNode;
		var nodeName = this.parentNode.name;
		remove_children(page_body);
		make_heading("Changed");
		build_table(page_body);
		var table_cells = document.getElementsByTagName("td");
		var newCell = 0;
		for (cell_index=0; cell_index < table_cells.length; cell_index++) {
			aCell = table_cells[cell_index];
			if ( aCell.name == nodeName ) {
				newCell = cell_index;
				//aCell.nodeValue = "-1";
			}
		}

		if (table_cells[newCell].childNodes[0]) {
			table_cells[newCell].childNodes[0].nodeValue = "-1";
		}
		
	}

	function showValue()
	// Fix a value in a square
	{
		var cellstring = this.name;
		//var currenttext=document.createTextNode(this.name);
		if ( ! this.childNodes[1] ) {
			currenttext=document.createTextNode(cellstring);
			this.appendChild(currenttext);
		}
		removeEvent(this, "mouseover", showValue, false);
	}

	function hideValue()
	// Fix a value in a square
	{
		var cellstring = this.name;
		//var currenttext=document.createTextNode(this.name);
		if ( this.childNodes[1] ) {
			this.removeChild(this.childNodes[1]);
		}
		removeEvent(this, "mouseout", hideValue, false);
	}

	function initialise_current() {
		for (row=0; row < maxValue; row++) {
			currentValues[row] = new Array(maxValue);
			for (column=0; column < maxValue; column++) {
				currentValues[row][column] = 0;
			}
		}
	}

	function remake_current() {
		for (row=0; row < maxValue; row++) {
			for (column=0; column < maxValue; column++) {
				currentValues[row][column] = (row+column) % maxValue;
			}
		}
	}

	function initialise_possible_values() {
		for (row=0; row < maxValue; row++) {
			possibleValues[row] = new Array(maxValue);
			for (column=0; column < maxValue; column++) {
				possibleValues[row][column] = new Array();
			}
		}
	}

	function initialise_count_values() {
		var count_values = new Array(maxValue+1);
		for (count_index = 1; count_index <= maxValue; count_index++ ) {
			count_values[count_index] = 0;
		}
		return count_values;
	}

	function build_possible_values() {
		initialise_possible_values();
		// Start by simply eliminating the values that have been fixed.

		for ( row=0; row < maxValue; row++ ) {
			for ( column=0; column < maxValue; column++ ) {
				var possible_values;
				if ( currentValues[row][column] == 0 ) {
					possible_values = get_possible_values(row, column);
				} else {
					possible_values = new Array(1);
					possible_values[0] = currentValues[row][column];
				}
				possibleValues[row][column] = possible_values;
			}
		}

		// Next try to identify a value which can only be in one place
		// e.g. if the "5" appears only once in a row, it must go there.
		for ( row=0; row < maxValue; row++ ) {
			var check_coordinates = get_associated_row(row, 0);
			check_coordinates[maxValue-1] = Coordinate(row, 0);
			var check_values= new Array(maxValue);
			for (check_index=1; check_index <= maxValue; check_index++) {
			}
			for (check_index=0; column < maxValue;column++) {
				row_coordinates = get_associated_row(row, column);
				possible_values = get_possible_values(row, column);
				possibleValues[row][column] = possible_values;
			}
		}

		for ( row=0; row < maxValue; row++) {
			var count_values = initialise_count_values;
			for ( count_index=1; count_index <= maxValue; count_index++ ) {
				count_values[count_index] = 0;
			}

			for ( column=0; column < maxValue; column++) {
				possible_values = possibleValues[row][column];
				for ( value_index=0; value_index < possible_values.length; value_index++ ) {
					count_values[possible_values[value_index]]++;
				}
			}
		}
	}

	function get_possible_values(which_row, which_column) {

		var check_values = new Array(1,2,3,4,5,6,7,8,9);

		var row = 0;
		while ( row < maxValue ) {
			if ( currentValues[row][which_column] != 0 ) {
				var tmp_value = currentValues[row][which_column];
				//check_values[currentValues[row][which_column]] = 0;
				check_values[tmp_value-1] = 0;
			}
			row++;
		}
	
		var column = 0;
		while ( column < maxValue ) {
			if ( currentValues[which_row][column] != 0 ) {
				check_values[currentValues[which_row][column] - 1] = 0;
			}
			column++;
		}

		var row_base = Math.floor( (which_row) / 3); 
		var row_offset = ( row_base ) * 3; 

		var column_base = Math.floor( (which_column) / 3); 
		var column_offset = (column_base ) * 3;

		row = 0;
		var max_inner_value = 3;
		while ( row < max_inner_value ) {
			column = 0;
			var check_row = row_offset + row;
			while ( column < max_inner_value ) {
				var check_column = column_offset + column;
				if (currentValues[check_row][check_column] != 0) {
					check_values[currentValues[check_row][check_column] - 1] = 0;
				}
				column++;
			}
			row++;
		}
	
		possible_values = new Array();
		possible_count = 0;
		check_value = 0;
		while ( check_value < maxValue ) {
			if ( check_values[check_value] != 0 ) {
				possible_values[possible_count] = check_values[check_value];
				possible_count++;
			}
			check_value++;
		}
		return possible_values;
	} // end function get_possible_values(which_row, which_column)

	function build_possible_values() {
		initialise_possible_values();
		// Start by simply eliminating the values that have been fixed.

		for ( var row=0; row < maxValue; row++ ) {
			for ( var column=0; column < maxValue; column++ ) {
				var possible_values;
				if ( currentValues[row][column] == 0 ) {
					possible_values = get_possible_values(row, column);
				} else {
					possible_values = new Array(1);
					possible_values[0] = currentValues[row][column];
				}
				possibleValues[row][column] = possible_values;
			}
		}

		//make_debug("poss 1");

		// Next try to identify a value which can only be in one place
		// e.g. if the "5" appears only once in a row, it must go there.
		// Do it for the rows first
		for ( var row=0; row < maxValue; row++ ) {
			// we are working with values so we want index range 1..maxValue
			var check_counts = new Array(maxValue+1);
			var check_coordinates = new Array(maxValue+1);
			for (var check_index=1; check_index <= maxValue; check_index++) {
				check_counts[check_index] = 0;
			}
			var coordinates = get_associated_row(row, 0);
			coordinates[coordinates.length] = new Coordinate(row, 0);

			for ( var coordinate_index=0; coordinate_index < coordinates.length; coordinate_index++ ) {
				var check_row = coordinates[coordinate_index].row;
				var check_column = coordinates[coordinate_index].column;
				possible_values = possibleValues[check_row][check_column];

				for ( var possible_index=0; possible_index < possible_values.length; possible_index++ ) {
					var possible_value=possible_values[possible_index];
					if ( check_counts[possible_value] == 0 ) {
						check_counts[possible_value] = 1;
						check_coordinates[possible_value] = coordinates[coordinate_index];
					} else {
						check_counts[possible_value]++;
					}
				}
			}

			for (var check_value=1; check_value <= maxValue; check_value++) {
				if ( check_counts[check_value] == 1 ) {
					possibleValues[check_coordinates[check_value].row][check_coordinates[check_value].column] = new Array(1);
					possibleValues[check_coordinates[check_value].row][check_coordinates[check_value].column][0] = check_value;
				}
			}
		}

		// Do it for the columns nextt
		for ( var column=0; column < maxValue; column++ ) {
			// we are working with values so we want index range 1..maxValue
			var check_counts = new Array(maxValue+1);
			var check_coordinates = new Array(maxValue+1);
			for (var check_index=1; check_index <= maxValue; check_index++) {
				check_counts[check_index] = 0;
			}
			var coordinates = get_associated_column(0, column);
			coordinates[coordinates.length] = new Coordinate(0, column);

			for ( var coordinate_index=0; coordinate_index < coordinates.length; coordinate_index++ ) {
				var check_row = coordinates[coordinate_index].row;
				var check_column = coordinates[coordinate_index].column;
				possible_values = possibleValues[check_row][check_column];

				for ( var possible_index=0; possible_index < possible_values.length; possible_index++ ) {
					var possible_value=possible_values[possible_index];
					if ( check_counts[possible_value] == 0 ) {
						check_counts[possible_value] = 1;
						check_coordinates[possible_value] = coordinates[coordinate_index];
					} else {
						check_counts[possible_value]++;
					}
				}
			}

			for (var check_value=1; check_value <= maxValue; check_value++) {
				if ( check_counts[check_value] == 1 ) {
					possibleValues[check_coordinates[check_value].row][check_coordinates[check_value].column] = new Array(1);
					possibleValues[check_coordinates[check_value].row][check_coordinates[check_value].column][0] = check_value;
				}
			}
		}

		// And then for each square
		for ( var square=0; square < maxValue; square++ ) {
			// we are working with values so we want index range 1..maxValue
			var check_counts = new Array(maxValue+1);
			var check_coordinates = new Array(maxValue+1);
			for (var check_index=1; check_index <= maxValue; check_index++) {
				check_counts[check_index] = 0;
			}

			var base_column = ( square % 3 ) * 3;
			var base_row = Math.floor( square / 3 ) * 3;

			var coordinates = get_associated_square(base_row, base_column);
			//var coordinates = get_associated_row(base_row, base_column);
			coordinates[coordinates.length] = new Coordinate(base_row, base_column);

			for ( var coordinate_index=0; coordinate_index < coordinates.length; coordinate_index++ ) {
				var check_row = coordinates[coordinate_index].row;
				var check_column = coordinates[coordinate_index].column;
				possible_values = possibleValues[check_row][check_column];

				for ( var possible_index=0; possible_index < possible_values.length; possible_index++ ) {
					var possible_value=possible_values[possible_index];
					if ( check_counts[possible_value] == 0 ) {
						check_counts[possible_value] = 1;
						check_coordinates[possible_value] = coordinates[coordinate_index];
					} else {
						check_counts[possible_value]++;
					}
				}
			}

			for (var check_value=1; check_value <= maxValue; check_value++) {
				if ( check_counts[check_value] == 1 ) {
					possibleValues[check_coordinates[check_value].row][check_coordinates[check_value].column] = new Array(1);
					possibleValues[check_coordinates[check_value].row][check_coordinates[check_value].column][0] = check_value;
				}
			}
		}
	}

	function build_table() {
		var main_table = document.createElement("TABLE");
		main_table.id = "mainTable";
		main_table.setAttribute("border","2");
		main_table.setAttribute("align","center");
		var table_body = document.createElement("TBODY");
		for( var row=0; row < maxValue; row++) {
			var current_row=document.createElement("TR");
			if ( ( row > 0 ) && ( ( row % 3 ) == 0 ) ) {
				for (var column=0; column < maxValue+2; column++) {
					var current_cell=document.createElement("TD");
					current_cell.className ="dummy_column";
					current_row.appendChild(current_cell);
				}

				table_body.appendChild(current_row);
				current_row=document.createElement("TR");
			}

			for (var column=0; column < maxValue; column++) {
				var current_cell=document.createElement("TD");
				if ( ( column > 0 ) && ( ( column % 3 ) == 0 ) ) {
					current_cell.className ="dummy_column";
					current_row.appendChild(current_cell);
					current_cell=document.createElement("TD");
				}
				current_cell.setAttribute("width", cell_width);
				current_cell.setAttribute("height", cell_height);
				current_cell.setAttribute("align","center");

				current_cell.name = "cell"+row+column;
				if ( currentValues[row][column] != 0 ) {
					var currenttext=document.createTextNode("");
					currenttext.nodeValue = currentValues[row][column];
					//addEvent(currenttext, "click", fixValue, false);
					addEvent(currenttext, "click", switchTable, false);
					current_cell.className = "fixed_value";
					current_cell.appendChild(currenttext);
				} else {
					//var possible_values = get_possible_values(row, column);
					var possible_values = possibleValues[row][column];

					var possible_count = 0;
					for ( var possible_index=0; possible_index < possible_values.length; possible_index++) {
						if ( possible_count < 3 ) {
							possible_count++;
						} else {
							var break_node = document.createElement("br");
							current_cell.appendChild(break_node);

							possible_count = 1;
						}
						var current_link = document.createElement("A");
						current_link.setAttribute("href","javascript:void()");
	
						addEvent(current_link, "click", fixValue, false);
						var link_text = document.createTextNode(possible_values[possible_index]);
						current_link.appendChild(link_text);
						current_cell.appendChild(current_link);
					}

					//addEvent(current_cell, "mouseover", showValue, false);
					//addEvent(current_cell, "mouseout", hideValue, false);
					current_cell.className ="inner_cell";
				}
				current_row.appendChild(current_cell);
			}
			table_body.appendChild(current_row);
		}
		main_table.appendChild(table_body);
		page_body.appendChild(main_table);
	}

	function start() {
		page_body = document.getElementsByTagName("body").item(0);

		initialise_current();
		build_possible_values();
		remove_children(page_body);
		//remake_current();
		make_heading("Sudoku Aid");

		//currentValues[3][2] = 7;
		build_table();
	}
</script>
</head>
<body onload="start()">
<h1>
Sudoku Aid
</h1>
<p>
If you don't see anything you don't have Javascript running.
</p>
<p>
This is a Sudoku aid written to use Javascript.
</p>
</body>
</html>

